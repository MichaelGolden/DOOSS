/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NucleotideDialog.java
 *
 * Created on 12 Dec 2011, 2:16:37 PM
 */
package structurevis.ui.datacreation;

import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import structurevis.structures.io.ReadseqTools;
import structurevis.ui.datacreation.verifiers.TextVerifier;
import structurevis.ui.datacreation.wizard.Wizard;

/**
 *
 * @author Michael Golden
 */
public class NucleotideDialog extends javax.swing.JDialog implements KeyListener {

    ImageIcon errorIcon = new ImageIcon(getClass().getResource("/structurevis/resources/error.png"));
    ImageIcon correctIcon = new ImageIcon(getClass().getResource("/structurevis/resources/correct.png"));
    Image appIcon = new ImageIcon(getClass().getResource("/structurevis/resources/sv_icon.png")).getImage();
    DataOverlay dataOverlay = new DataOverlay();

    /*public enum ExitValue {

    EXIT_AND_ADD, EXIT_AND_CANCEL
    };
    public ExitValue returnVal = ExitValue.EXIT_AND_CANCEL;*/
    DataModel dataModel;
    int openIndex = -1;
    TextVerifier textVerifier = new TextVerifier();

    /** Creates new form NucleotideDialog */
    public NucleotideDialog(java.awt.Frame parent, boolean modal, DataModel dataModel, int openOverlay) {
        super(parent, modal);
        this.openIndex = openOverlay;
        this.dataModel = dataModel;
        initComponents();

        if (openOverlay == -1) {
            this.nameField.setText(dataModel.getNextName("NucleotideComposition_"));
        } else {
            dataOverlay = dataModel.overlays.get(openOverlay);
            this.nucleotideAlignmentField.setText(dataModel.overlays.get(openOverlay).nucleotideAlignmentFile.getPath());
            this.nameField.setText(dataModel.overlays.get(openOverlay).fieldName);
        }

        this.nameField.addKeyListener(this);
        this.nameField.setInputVerifier(textVerifier);

        setTitle("Add nucleotide alignment");
        setIconImage(appIcon);

        updateToolTips();
    }

    public void updateToolTips() {
        // nucleotide alignment
        errorLabelNucleotideAlignment.setIcon(errorIcon);
        errorLabelNucleotideAlignment.setToolTipText("");
        if (nucleotideAlignmentField.getText().equals("")) {
            errorLabelNucleotideAlignment.setToolTipText("Please select a file.");
        } else if (!new File(nucleotideAlignmentField.getText()).exists()) {
            errorLabelNucleotideAlignment.setToolTipText("The specified file does not exist.");
        } else if (!ReadseqTools.isKnownFormat(new File(nucleotideAlignmentField.getText()))) {
            errorLabelNucleotideAlignment.setToolTipText("The alignment format is not recognized.");
        }
        else {
            errorLabelNucleotideAlignment.setToolTipText("The alignment format has been detected as: " + ReadseqTools.getFormatName(new File(nucleotideAlignmentField.getText()))+".");
            errorLabelNucleotideAlignment.setIcon(correctIcon);
        }

         // field name
        errorLabel_fieldName.setToolTipText("");
        errorLabel_fieldName.setIcon(errorIcon);
        if (nameField.getText().equals("")) {
            errorLabel_fieldName.setToolTipText("Please enter a name.");
        } else if (dataModel.isFieldNameUsed(nameField.getText(), dataOverlay)) {
            errorLabel_fieldName.setToolTipText("A data overlay with this name already exists in this project. Please use a different name.");
        } else {
            errorLabel_fieldName.setIcon(null);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        nucleotideAlignmentField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        errorLabelNucleotideAlignment = new javax.swing.JLabel();
        errorLabel_fieldName = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Nucleotide alignment");

        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        nucleotideAlignmentField.setEditable(false);

        addButton.setText("Ok");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Field name");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        errorLabelNucleotideAlignment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/structurevis/resources/error.png"))); // NOI18N
        errorLabelNucleotideAlignment.setText(" ");

        errorLabel_fieldName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/structurevis/resources/error.png"))); // NOI18N
        errorLabel_fieldName.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nucleotideAlignmentField, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorLabelNucleotideAlignment)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorLabel_fieldName)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(nucleotideAlignmentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(errorLabelNucleotideAlignment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(errorLabel_fieldName))
                .addGap(18, 18, 18)
                .addComponent(addButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (new File(nucleotideAlignmentField.getText()).exists()) {
            Wizard.fileChooserOpen.setSelectedFile(new File(nucleotideAlignmentField.getText()));
        }
        int returnVal = Wizard.fileChooserOpen.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            nucleotideAlignmentField.setText(Wizard.fileChooserOpen.getSelectedFile().getPath());
        }
        updateToolTips();
    }//GEN-LAST:event_browseButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
         if (openIndex == -1) {
            dataModel.overlays.add(dataOverlay);
        }
        dataOverlay.nucleotideAlignmentFile = new File(nucleotideAlignmentField.getText());
        dataOverlay.fieldName = nameField.getText();
        dataOverlay.type = "NucleotideComposition";
        this.dispose();
    }//GEN-LAST:event_addButtonActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NucleotideDialog dialog = new NucleotideDialog(new javax.swing.JFrame(), true, new DataModel(), -1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel errorLabelNucleotideAlignment;
    private javax.swing.JLabel errorLabel_fieldName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField nucleotideAlignmentField;
    // End of variables declaration//GEN-END:variables

    public void keyTyped(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
        if (nameField.getInputVerifier().verify(nameField)) {
        }
        updateToolTips();
    }
}
