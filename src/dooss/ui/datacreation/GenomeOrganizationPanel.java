/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GenomeOrganizationPanel.java
 *
 * Created on 04 Dec 2011, 8:21:14 AM
 */
package structurevis.ui.datacreation;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.File;
import java.util.MissingResourceException;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import structurevis.data.MapCache;
import structurevis.data.Mapping;
import structurevis.structures.io.ReadseqTools;
import structurevis.ui.datacreation.wizard.Wizard;
import structurevis.ui.datacreation.wizard.WizardListener;
import structurevis.ui.layerpanel.GenomeLayer;
import structurevis.ui.layerpanel.GenomeOrganization;
import structurevis.ui.layerpanel.LayerPanel;
import structurevis.ui.layerpanel.Region;

/**
 *
 * @author Michael Golden
 */
public class GenomeOrganizationPanel extends javax.swing.JPanel implements ListSelectionListener, TableModelListener, WizardListener, DataModelListener {

    ImageIcon errorIcon = new ImageIcon(getClass().getResource("/structurevis/resources/error.png"));
    ImageIcon correctIcon = new ImageIcon(getClass().getResource("/structurevis/resources/correct.png"));
    GenomeOrganizationTable genomeTable;
    LayerPanel layerPanel;
    DataModel dataModel;

    /** Creates new form GenomeOrganizationPanel */
    public GenomeOrganizationPanel(DataModel dataModel) {
        this.dataModel = dataModel;
        initComponents();
        genomeTable = new GenomeOrganizationTable(dataModel);
        jPanel1.add(genomeTable);

        layerPanel = new LayerPanel(null, 10000);
        previewScrollPane.setViewportView(layerPanel);
        //jScrollPane2.add(layerPanel);

        genomeTable.tableDataModel.addTableModelListener(this);
        genomeTable.table.getSelectionModel().addListSelectionListener(this);
        removeButton.setEnabled(false);
        moveUpButton.setEnabled(false);
        moveDownButton.setEnabled(false);

        try {
            PropertyResourceBundle resources = (PropertyResourceBundle) ResourceBundle.getBundle("structurevis.ui.datacreation.text");
            genomeOrganizationDescription.setText(resources.getString("GENOME_ANNOTATIONS_DESCRIPTION"));
            genomeOrganizationDescription.setCaretPosition(0);
        } catch (MissingResourceException mre) {
            // resource missing
        }
        WizardMain.wizard.addWizardListener(this);
        dataModel.addDataModelListener(this);
        recomputMappingsButton.setVisible(false);
        updateErrors();
    }

    public void updateErrors() {
        this.errorLabel_addFromGenbank.setIcon(errorIcon);
        errorLabel_addFromGenbank.setIcon(errorIcon);
        errorLabel_addFromGenbank.setToolTipText("");
        addFromGenbankAndMapButton.setEnabled(false);
        if (dataModel.getReferenceAlignment() == null) {
            errorLabel_addFromGenbank.setToolTipText("Please select a reference file on the 'Genome structure' panel.");
            WizardMain.wizard.showErrorsBeforeContinue(true);
        } else if (!dataModel.getReferenceAlignment().exists()) {
            errorLabel_addFromGenbank.setToolTipText("The specified reference file does not exist.");
            WizardMain.wizard.showErrorsBeforeContinue(true);
        } else if (!ReadseqTools.isKnownFormat(dataModel.getReferenceAlignment())) {
            errorLabel_addFromGenbank.setToolTipText("The format of the specified reference file is not recognized.");
            WizardMain.wizard.showErrorsBeforeContinue(true);
        } else {
            // errorLabel_addFromGenbank.setToolTipText("The alignment format has been detected as: " + ReadseqTools.getFormatName(dataModel.referenceNucleotideAlignment) + ".");
            addFromGenbankAndMapButton.setEnabled(true);
            errorLabel_addFromGenbank.setIcon(null);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addFromGenbankAndMapButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        previewScrollPane = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        genomeOrganizationDescription = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        addFromGenbankWithoutMapButton = new javax.swing.JButton();
        errorLabel_addFromGenbank = new javax.swing.JLabel();
        recomputMappingsButton = new javax.swing.JButton();

        addFromGenbankAndMapButton.setText("Add from Genbank and map...");
        addFromGenbankAndMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFromGenbankAndMapButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add empty");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        previewScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence annotations preview"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sequence annotations"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        moveUpButton.setText("Move up");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Move down");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        genomeOrganizationDescription.setContentType("text/html");
        genomeOrganizationDescription.setEditable(false);
        jScrollPane3.setViewportView(genomeOrganizationDescription);

        jLabel3.setText("Description");

        addFromGenbankWithoutMapButton.setText("Add from Genbank without mapping...");
        addFromGenbankWithoutMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFromGenbankWithoutMapButtonActionPerformed(evt);
            }
        });

        errorLabel_addFromGenbank.setIcon(new javax.swing.ImageIcon(getClass().getResource("/structurevis/resources/error.png"))); // NOI18N
        errorLabel_addFromGenbank.setText(" ");

        recomputMappingsButton.setText("Re-compute mappings");
        recomputMappingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recomputMappingsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(previewScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(recomputMappingsButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addFromGenbankAndMapButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorLabel_addFromGenbank)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addFromGenbankWithoutMapButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(moveUpButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveDownButton)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(addFromGenbankAndMapButton)
                    .addComponent(removeButton)
                    .addComponent(moveDownButton)
                    .addComponent(moveUpButton)
                    .addComponent(addFromGenbankWithoutMapButton)
                    .addComponent(errorLabel_addFromGenbank))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recomputMappingsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(previewScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addFromGenbankAndMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFromGenbankAndMapButtonActionPerformed
        int returnVal = Wizard.fileChooserOpen.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            genomeTable.addAnnotationsFromGenbankFile(Wizard.fileChooserOpen.getSelectedFile(), true);
            genomeTable.tableDataModel.updateMappings();
        }
    }//GEN-LAST:event_addFromGenbankAndMapButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        genomeTable.tableDataModel.removeRows(genomeTable.table.getSelectedRows());
    }//GEN-LAST:event_removeButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        int s = genomeTable.table.getSelectedRow();
        if (s >= 1) {
            genomeTable.tableDataModel.move(genomeTable.table.getSelectedRow(), -1);
            genomeTable.table.getSelectionModel().setSelectionInterval(s - 1, s - 1);
        }
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        int s = genomeTable.table.getSelectedRow();
        if (s >= 0 && s < genomeTable.table.getRowCount() - 1) {
            genomeTable.tableDataModel.move(genomeTable.table.getSelectedRow(), +1);
            genomeTable.table.getSelectionModel().setSelectionInterval(s + 1, s + 1);
        }
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        genomeTable.tableDataModel.addRow(GenomeOrganizationTable.defaultRow(), null, null);
        genomeTable.scrollPane.getVerticalScrollBar().setValue(genomeTable.scrollPane.getVerticalScrollBar().getMaximum() + 100);
        genomeTable.table.setRowSelectionInterval(genomeTable.table.getRowCount() - 1, genomeTable.table.getRowCount() - 1);
    }//GEN-LAST:event_addButtonActionPerformed

    private void addFromGenbankWithoutMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFromGenbankWithoutMapButtonActionPerformed
        int returnVal = Wizard.fileChooserOpen.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            genomeTable.addAnnotationsFromGenbankFile(Wizard.fileChooserOpen.getSelectedFile(), false);
            genomeTable.tableDataModel.updateMappings();
        }
    }//GEN-LAST:event_addFromGenbankWithoutMapButtonActionPerformed

    private void recomputMappingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recomputMappingsButtonActionPerformed
        genomeTable.tableDataModel.recomputeMappings();
        recomputMappingsButton.setVisible(false);
    }//GEN-LAST:event_recomputMappingsButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addFromGenbankAndMapButton;
    private javax.swing.JButton addFromGenbankWithoutMapButton;
    private javax.swing.JLabel errorLabel_addFromGenbank;
    private javax.swing.JTextPane genomeOrganizationDescription;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JScrollPane previewScrollPane;
    private javax.swing.JButton recomputMappingsButton;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables

    public void tableChanged(TableModelEvent e) {
        dataModel.genomeOrganization = new GenomeOrganization();
        int maxLevel = 0;
        for (int i = 0; i < genomeTable.tableDataModel.rows.size(); i++) {
            Object[] row = genomeTable.tableDataModel.rows.get(i);
            if ((Boolean) row[0]) {
                Region r = new Region((Integer) row[5], (Integer) row[6], (String) row[1]);
                r.color = (Color) row[7];
                r.level = (Integer) row[8];
                dataModel.genomeOrganization.genome.add(r);
                maxLevel = Math.max(maxLevel, r.level);
            }
        }
        layerPanel.removeAllLayers();
        GenomeLayer l = new GenomeLayer(layerPanel, dataModel.genomeOrganization, "Sequence annotations");
        layerPanel.genomeLength = genomeTable.genomeLength;
        l.setPreferredSize(new Dimension(10000, l.rulerHeight + (maxLevel + 1) * l.blockHeight));
        layerPanel.setPreferredSize(new Dimension(10000, l.rulerHeight + (maxLevel + 1) * l.blockHeight));


        layerPanel.addLayer(l);
        previewScrollPane.revalidate();
    }

    public void valueChanged(ListSelectionEvent e) {
        if (genomeTable.table.getSelectedRowCount() > 0) {
            removeButton.setEnabled(true);
        } else {
            removeButton.setEnabled(false);
        }

        if (genomeTable.table.getSelectedRowCount() == 1) {
            moveDownButton.setEnabled(true);
            moveUpButton.setEnabled(true);
        } else {
            moveDownButton.setEnabled(false);
            moveUpButton.setEnabled(false);
        }


    }

    public void panelChangedEvent(Object fromPanelIdentifier, Object toPanelIdentifier) {
        if (toPanelIdentifier.equals(GenomeOrganizationDescriptor.IDENTIFIER)) {
            updateErrors();
        }
    }

    public void computeMappings() {
    }

    public void referenceAlignmentChanged(File oldReferenceAlignment, File newReferenceAlignment) {
        if ((oldReferenceAlignment == null && newReferenceAlignment != null) || !oldReferenceAlignment.equals(newReferenceAlignment)) {
            if (genomeTable.tableDataModel.hasMappedData) {
                Object[] options = {"Yes (recommended)", "No"};
                int n = JOptionPane.showOptionDialog(this,
                        "The reference alignment has changed. Do you wish to recompute the genome annotation mapping(s)? It is strongly recommended that you do.",
                        "Reference alignment changed.",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]);
                if (n == 0) {
                    genomeTable.tableDataModel.recomputeMappings();
                    //recomputMappingsButton.setEnabled(false);
                    recomputMappingsButton.setVisible(false);
                } else {
                    //recomputMappingsButton.setEnabled(true);
                    recomputMappingsButton.setVisible(true);
                }
            }
        }
    }

    public void dataSourceProcessed(int n, int total, Object dataSource) {
        
    }
}
